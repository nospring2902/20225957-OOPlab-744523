1. Which classes are aggregates of other classes? Checking all constructors of whole classes if they initialize for their parts?
- Cart aggregates Media: Cart contains multiple Media objects, but Media objects can exist independently of Cart.
- CompactDisc aggregates Track: CompactDisc contains Track objects, which can also exist independently.
- Store aggregates Media: Store contains multiple Media objects, but Media objects can exist independently of Store.
2. If the passing object is not an instance of Media, what happens?
If the passing object is not an instance of Media, the equals() method should return false. This is because the object being compared is not of the same type as Media, and thus cannot be considered "equal" based on the defined criteria for equality in the equals() method.
3. Question: Alternatively, to compare items in the cart, instead of using Comparator, we can use the Comparable interface and override the compareTo() method. You can refer to the Java docs to see the information of this interface.
Suppose we are taking this Comparable interface approach.
- What class should implement the Comparable interface?    
	Media class should implement the Comparable interface
- In those classes, how should you implement the compareTo()method be to reflect the ordering that we want?  
	public int compareTo(Media other) {
        int titleComparison = this.getTitle().compareTo(other.getTitle());
        if (titleComparison != 0) {
            return titleComparison;
        } else {
            return Double.compare(this.getCost(), other.getCost());
        }
- Can we have two ordering rules of the item (by title then cost and by cost then title) if we use this Comparable interface approach?  
	No we cannot. The Comparable interface assumes that there is only one natural ordering for the objects being compared.
- Suppose the DVDs has a different ordering rule from the other media types, that is by title, then decreasing length, then cost. How would you modify your code to allow this?  
    We can override the compareTo method in Disc class to reflect the new ordering rule.  
    The modified code:
public int compareTo(Media other) {
        if (other instanceof Disc) {
            Disc otherDVD = (Disc) other;
            int titleComparison = this.getTitle().compareTo(otherDVD.getTitle());
            if (titleComparison != 0) {
                // Compare by title
                return titleComparison;
            } else {
                // Compare by decreasing length
                int lengthComparison = Integer.compare(otherDVD.getLength(), this.getLength());
                if (lengthComparison != 0) {
                    return lengthComparison;
                } else {
                    // Compare by cost
                    return Double.compare(this.getCost(), otherDVD.getCost());
                }
            }
        } else {
            // If the media object is not a Disc, use the default method of the Media class
            return super.compareTo(other);
        }
    }